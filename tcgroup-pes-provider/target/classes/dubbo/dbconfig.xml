<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

       <bean id="log-filter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter">
              <property name="statementExecutableSqlLogEnable" value="true"/>
       </bean>

       <!-- <bean id="dataSource"
             class="com.alibaba.druid.pool.DruidDataSource"
             destroy-method="close">
              <property name="driverClassName" value="${spring.his.jdbc.driverClassName}"/>
              <property name="url" value="${spring.his.jdbc.url}"/>
              <property name="username" value="${spring.his.jdbc.username}"/>
              <property name="password" value="${spring.his.jdbc.password}"/>
              <property name="defaultAutoCommit" value="true"/>
              <property name="logAbandoned" value="true"/>
              <property name="removeAbandoned" value="true"/>
              <property name="removeAbandonedTimeout" value="150"/>
              <property name="testWhileIdle" value="true"/>
              <property name="timeBetweenEvictionRunsMillis" value="300000"/>
              <property name="minEvictableIdleTimeMillis" value="320000"/>
              <property name="initialSize" value="${spring.his.dbcp.initialSize:15}"/>
              <property name="minIdle" value="${spring.his.dbcp.minIdle:15}"/>
              <property name="maxActive" value="${spring.his.dbcp.maxActive:30}"/>
              <property name="maxWait" value="${spring.his.dbcp.maxWait:3000}"/>
              <property name="testOnBorrow" value="false"/>
              <property name="testOnReturn" value="false"/>
              <property name="validationQuery" value="SELECT 'x'"/>
              <property name="proxyFilters">
                     <list>
                            <ref bean="log-filter"/>
                     </list>
              </property>
       </bean> -->
<!-- 
       <bean id="txManager"
             class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
              <property name="dataSource" ref="dataSource"/>
       </bean>


       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
              <property name="configLocation" value="classpath:dubbo/sqlMapConfig.xml"/>
              <property name="mapperLocations" value="classpath:ibatis/*.xml"/>
              <property name="dataSource" ref="dataSource"/>
       </bean>


       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
              <property name="basePackage" value="com.tc.pes.provider.dao"/>
              <property name="markerInterface" value="com.tc.pes.provider.dao.MyBatisRepository"/>
       </bean> -->

       <!-- 手动指定要AOP的事务管理 -->
<!--        <tx:advice id="serviceTxAdvice" transaction-manager="txManager">
              <tx:attributes>
                     <tx:method name="*" propagation="REQUIRED" rollback-for="Throwable" />
                     <tx:method name="pump*" propagation="REQUIRED" rollback-for="Throwable"/>
              </tx:attributes>
       </tx:advice>
       <aop:config>
              <aop:pointcut id="services"
                            expression="execution(* com.tc.his.provider.service.impl..*ServiceImpl.*(..))"/>
              <aop:advisor pointcut-ref="services" advice-ref="serviceTxAdvice"/>
       </aop:config> -->
</beans>