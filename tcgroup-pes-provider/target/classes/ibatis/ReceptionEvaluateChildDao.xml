<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tc.pes.provider.dao.ReceptionEvaluateChildDao">
  <resultMap id="BaseResultMap" type="com.tc.pes.api.model.ReceptionEvaluateChild">
    <constructor>
      <idArg column="reception_evaluate_child_id" javaType="java.lang.Long" jdbcType="BIGINT" />
      <arg column="reception_evaluate_id" javaType="java.lang.Long" jdbcType="BIGINT" />
      <arg column="evaluate_level" javaType="java.lang.Short" jdbcType="SMALLINT" />
      <arg column="evaluate_type" javaType="java.lang.Short" jdbcType="SMALLINT" />
    </constructor>
  </resultMap>
  <sql id="Criteria_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Criteria_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    reception_evaluate_child_id, reception_evaluate_id, evaluate_level, evaluate_type
  </sql>
  <select id="selectByCriteria" parameterType="com.tc.pes.api.model.ReceptionEvaluateChildCriteria" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_reception_evaluate_child
    <if test="_parameter != null">
      <include refid="Criteria_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <include refid="PostgreDialectPage" />
  </select>
  <select id="selectById" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_reception_evaluate_child
    where reception_evaluate_child_id = #{receptionEvaluateChildId,jdbcType=BIGINT}
  </select>
  <delete id="deleteById" parameterType="java.lang.Long">
    delete from t_reception_evaluate_child
    where reception_evaluate_child_id = #{receptionEvaluateChildId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByCriteria" parameterType="com.tc.pes.api.model.ReceptionEvaluateChildCriteria">
    delete from t_reception_evaluate_child
    <if test="_parameter != null">
      <include refid="Criteria_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.tc.pes.api.model.ReceptionEvaluateChild">
    insert into t_reception_evaluate_child (reception_evaluate_child_id, reception_evaluate_id, 
      evaluate_level, evaluate_type)
    values (#{receptionEvaluateChildId,jdbcType=BIGINT}, #{receptionEvaluateId,jdbcType=BIGINT}, 
      #{evaluateLevel,jdbcType=SMALLINT}, #{evaluateType,jdbcType=SMALLINT})
  </insert>
  <insert id="insertSelective" parameterType="com.tc.pes.api.model.ReceptionEvaluateChild">
    insert into t_reception_evaluate_child
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="receptionEvaluateChildId != null">
        reception_evaluate_child_id,
      </if>
      <if test="receptionEvaluateId != null">
        reception_evaluate_id,
      </if>
      <if test="evaluateLevel != null">
        evaluate_level,
      </if>
      <if test="evaluateType != null">
        evaluate_type,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="receptionEvaluateChildId != null">
        #{receptionEvaluateChildId,jdbcType=BIGINT},
      </if>
      <if test="receptionEvaluateId != null">
        #{receptionEvaluateId,jdbcType=BIGINT},
      </if>
      <if test="evaluateLevel != null">
        #{evaluateLevel,jdbcType=SMALLINT},
      </if>
      <if test="evaluateType != null">
        #{evaluateType,jdbcType=SMALLINT},
      </if>
    </trim>
  </insert>
  <select id="countByCriteria" parameterType="com.tc.pes.api.model.ReceptionEvaluateChildCriteria" resultType="java.lang.Long">
    select count(*) from t_reception_evaluate_child
    <if test="_parameter != null">
      <include refid="Criteria_Where_Clause" />
    </if>
  </select>
  <update id="updateByCriteriaSelective" parameterType="map">
    update t_reception_evaluate_child
    <set>
      <if test="record.receptionEvaluateChildId != null">
        reception_evaluate_child_id = #{record.receptionEvaluateChildId,jdbcType=BIGINT},
      </if>
      <if test="record.receptionEvaluateId != null">
        reception_evaluate_id = #{record.receptionEvaluateId,jdbcType=BIGINT},
      </if>
      <if test="record.evaluateLevel != null">
        evaluate_level = #{record.evaluateLevel,jdbcType=SMALLINT},
      </if>
      <if test="record.evaluateType != null">
        evaluate_type = #{record.evaluateType,jdbcType=SMALLINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Criteria_Where_Clause" />
    </if>
  </update>
  <update id="updateByCriteria" parameterType="map">
    update t_reception_evaluate_child
    set reception_evaluate_child_id = #{record.receptionEvaluateChildId,jdbcType=BIGINT},
      reception_evaluate_id = #{record.receptionEvaluateId,jdbcType=BIGINT},
      evaluate_level = #{record.evaluateLevel,jdbcType=SMALLINT},
      evaluate_type = #{record.evaluateType,jdbcType=SMALLINT}
    <if test="_parameter != null">
      <include refid="Update_By_Criteria_Where_Clause" />
    </if>
  </update>
  <update id="updateByIdSelective" parameterType="com.tc.pes.api.model.ReceptionEvaluateChild">
    update t_reception_evaluate_child
    <set>
      <if test="receptionEvaluateId != null">
        reception_evaluate_id = #{receptionEvaluateId,jdbcType=BIGINT},
      </if>
      <if test="evaluateLevel != null">
        evaluate_level = #{evaluateLevel,jdbcType=SMALLINT},
      </if>
      <if test="evaluateType != null">
        evaluate_type = #{evaluateType,jdbcType=SMALLINT},
      </if>
    </set>
    where reception_evaluate_child_id = #{receptionEvaluateChildId,jdbcType=BIGINT}
  </update>
  <update id="updateById" parameterType="com.tc.pes.api.model.ReceptionEvaluateChild">
    update t_reception_evaluate_child
    set reception_evaluate_id = #{receptionEvaluateId,jdbcType=BIGINT},
      evaluate_level = #{evaluateLevel,jdbcType=SMALLINT},
      evaluate_type = #{evaluateType,jdbcType=SMALLINT}
    where reception_evaluate_child_id = #{receptionEvaluateChildId,jdbcType=BIGINT}
  </update>
  <sql id="PostgreDialectPage">
    <if test="page != null and page.begin != null and page.begin gte 0">
      offset #{page.begin}
    </if>
    <if test="page != null and page.pageSize != null and page.pageSize gte 0">
      limit #{page.pageSize}
    </if>
  </sql>
</mapper>